# -*- coding: utf-8 -*-
"""Trivago Case Study - Data Prep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sdSYJjoLPb9xgNYCRv5AXeiJUMN6qmVb
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/
!ls

import pandas as pd

data = pd.read_excel('202303_Task1_Sessions Cleansed.xlsx')
data.head(2)

# Replace '\N' with NaN (missing values)
data.replace('\\N', pd.NA, inplace=True)

data_copy = data.copy()
data.columns = ['single_column']

# Split the single column into multiple columns
column_names = ['ymd', 'session_id', 'tracking_id', 'platform', 'is_app', 'is_repeater', 'traffic_type',
                'country_name', 'agent_id', 'clickouts', 'bookings', 'session_duration',
                'entry_page', 'total_ctp', 'arrival_day', 'departure_day']

# Use the str.split method to split the column based on the delimiter and expand into multiple columns
data_split = data['single_column'].str.split(',', expand=True)

# Assign the new column names
data_split.columns = column_names

# Display the resulting DataFrame
print(data_split)

data_split.replace('\\N', pd.NA, inplace=True)

# Convert 'ymd' to datetime
data_split['ymd'] = pd.to_datetime(data_split['ymd'], format='%Y%m%d')

# Convert 'arrival_day' and 'departure_day' to datetime
data_split['arrival_day'] = pd.to_datetime(data_split['arrival_day'], format='%Y%m%d', errors='coerce')
data_split['departure_day'] = pd.to_datetime(data_split['departure_day'], format='%Y%m%d', errors='coerce')

data_split['clickouts'] = data_split['clickouts'].astype(int)
data_split['bookings'] = data_split['bookings'].astype(int)
data_split['total_ctp'] = data_split['total_ctp'].astype(int)

data_split.to_excel('Sessions Cleansed and Formatted.xlsx', index=False)

len(data_split)

import pandas as pd
import csv
from io import StringIO

file_path = '202303_Task1_Sessions v1.csv'

def parse_csv_like_string(s):
    reader = csv.reader(StringIO(s))
    row = next(reader)

    # Combine extra fields into the country name
    if len(row) > 16:
        country_end = len(row) - 8  # 8 is the number of fields after country_name
        country_name = ', '.join(row[7:country_end])
        row = row[:7] + [country_name] + row[country_end:]

    return row

def read_csv_to_dataframe(file_path):
    # Read the file content
    with open(file_path, 'r') as file:
        content = file.read().splitlines()

    # Parse the header and data
    header = parse_csv_like_string(content[0])
    data = [parse_csv_like_string(row) for row in content[1:]]

    # Create DataFrame
    df = pd.DataFrame(data, columns=header)

    # Convert data types
    df['ymd'] = pd.to_datetime(df['ymd'], format='%Y%m%d')
    df['is_app'] = df['is_app'].astype(bool)
    df['is_repeater'] = df['is_repeater'].astype(bool)
    df['traffic_type'] = df['traffic_type'].astype(int)
    df['agent_id'] = df['agent_id'].astype(int)
    df['clickouts'] = df['clickouts'].astype(int)
    df['bookings'] = df['bookings'].astype(int)
    df['session_duration'] = df['session_duration'].astype(int)
    df['entry_page'] = df['entry_page'].astype(int)
    df['total_ctp'] = df['total_ctp'].astype(float)
    df['arrival_day'] = pd.to_datetime(df['arrival_day'], format='%Y%m%d', errors='coerce')
    df['departure_day'] = pd.to_datetime(df['departure_day'], format='%Y%m%d', errors='coerce')

    return df

# Specify the path to your CSV file
#file_path = '202303_Task1_Sessions v1.csv'

# Read the data into a DataFrame
df = read_csv_to_dataframe(file_path)

# Display the first few rows of the DataFrame
print(df.head())

# Display information about the DataFrame
print(df.info())

# Display summary statistics
print(df.describe())
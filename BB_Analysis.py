# -*- coding: utf-8 -*-
"""BB Analysis Growth Rates.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qb9XDLcT8sUDJgGjYiDGGOKUPGTgl5HC
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')

# %cd /content/drive/MyDrive/
!ls


import pandas as pd

data = pd.read_excel('BB Consolidated Data.xlsx')
data.head(2)

# Load the orders data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

#Acquisition month_dt

import pandas as pd

# Load the orders data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month_dt'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')

# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)

# Remove the last month's data
max_date_orders = orders_data['Order month_dt'].max()
orders_data = orders_data[orders_data['Order month_dt'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()
acquisition_data = acquisition_data[acquisition_data['Acquisition month'] < max_date_acquisition]

# Define dimensions to analyze
dimensions = ['Region', 'Acquisition Channel', 'Segment']

# Function to calculate average growth rate
def calculate_average_growth_rate(data, value_column):
    monthly_growth = data[value_column].pct_change().dropna() * 100
    average_growth_rate = monthly_growth.mean()
    return average_growth_rate

average_growth_rates = {
    'overall': {},
    'by_dimension': {dimension: {} for dimension in dimensions}
}

# Calculate overall average growth rates
average_growth_rates['overall']['Revenue'] = calculate_average_growth_rate(orders_data.groupby('Order month_dt')['Revenue'].sum().reset_index(), 'Revenue')
average_growth_rates['overall']['Orders'] = calculate_average_growth_rate(orders_data.groupby('Order month_dt')['Orders'].sum().reset_index(), 'Orders')
average_growth_rates['overall']['Acquisitions'] = calculate_average_growth_rate(acquisition_data.groupby('Acquisition month')['New Companies'].sum().reset_index(), 'New Companies')

# Calculate average growth rates by dimension
for dimension in dimensions:
    for category in orders_data[dimension].unique():
        category_data_orders = orders_data[orders_data[dimension] == category].groupby('Order month_dt').sum().reset_index()
        category_data_acquisitions = acquisition_data[acquisition_data[dimension] == category].groupby('Acquisition month').sum().reset_index()

        average_growth_rates['by_dimension'][dimension][category] = {
            'Revenue': calculate_average_growth_rate(category_data_orders, 'Revenue'),
            'Orders': calculate_average_growth_rate(category_data_orders, 'Orders'),
            'Acquisitions': calculate_average_growth_rate(category_data_acquisitions, 'New Companies')
        }

# Display the results
print("Overall Average Growth Rates:")
print(f"Revenue: {average_growth_rates['overall']['Revenue']:.2%}")
print(f"Orders: {average_growth_rates['overall']['Orders']:.2%}")
print(f"Acquisitions: {average_growth_rates['overall']['Acquisitions']:.2%}")

print("\nAverage Growth Rates by Dimension:")
for dimension, categories in average_growth_rates['by_dimension'].items():
    print(f"\n{dimension}:")
    for category, rates in categories.items():
        print(f"  {category}:")
        print(f"    Revenue: {rates['Revenue']:.2%}")
        print(f"    Orders: {rates['Orders']:.2%}")
        print(f"    Acquisitions: {rates['Acquisitions']:.2%}")

import pandas as pd
import matplotlib.pyplot as plt

# Load the orders and acquisitions data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')

# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)

# Remove the last month's data
max_date_orders = orders_data['Order month'].max()
orders_data = orders_data[orders_data['Order month'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()
acquisition_data = acquisition_data[acquisition_data['Acquisition month'] < max_date_acquisition]

# Define dimensions to analyze
dimensions = ['Region', 'Acquisition Channel', 'Segment']

# Function to calculate moving average
def calculate_moving_average(data, value_column, window=3):
    moving_average = data[value_column].rolling(window=window).mean()
    return moving_average

# Function to calculate growth rates based on moving average
def calculate_growth_rates(data, value_column, window=3):
    moving_average = calculate_moving_average(data, value_column, window)
    growth_rate = moving_average.pct_change().dropna() * 100
    return growth_rate

# Plot overall growth rates
def plot_overall_growth_rates(orders_data, acquisition_data, window=3):
    monthly_revenue = orders_data.groupby('Order month')['Revenue'].sum().reset_index()
    monthly_orders = orders_data.groupby('Order month')['Orders'].sum().reset_index()
    monthly_acquisitions = acquisition_data.groupby('Acquisition month')['New Companies'].sum().reset_index()

    growth_rate_revenue = calculate_growth_rates(monthly_revenue, 'Revenue', window)
    growth_rate_orders = calculate_growth_rates(monthly_orders, 'Orders', window)
    growth_rate_acquisitions = calculate_growth_rates(monthly_acquisitions, 'New Companies', window)

    plt.figure(figsize=(14, 7))
    plt.plot(monthly_revenue['Order month'].iloc[window:], growth_rate_revenue, label='Revenue', linestyle='-')
    plt.plot(monthly_orders['Order month'].iloc[window:], growth_rate_orders, label='Orders', linestyle='--')
    plt.plot(monthly_acquisitions['Acquisition month'].iloc[window:], growth_rate_acquisitions, label='Acquisitions', linestyle='-.')

    plt.legend()
    plt.title('Overall Growth Rates (Moving Average)')
    plt.xlabel('Date')
    plt.ylabel('Growth Rate')
    plt.show()

plot_overall_growth_rates(orders_data, acquisition_data, window=3)

# Plot growth rates by dimension
def plot_growth_rates_by_dimension(orders_data, acquisition_data, dimension, window=3):
    for category in orders_data[dimension].unique():
        category_data_orders = orders_data[orders_data[dimension] == category].groupby('Order month').sum().reset_index()
        category_data_acquisitions = acquisition_data[acquisition_data[dimension] == category].groupby('Acquisition month').sum().reset_index()

        growth_rate_revenue = calculate_growth_rates(category_data_orders, 'Revenue', window)
        growth_rate_orders = calculate_growth_rates(category_data_orders, 'Orders', window)
        growth_rate_acquisitions = calculate_growth_rates(category_data_acquisitions, 'New Companies', window)

        plt.figure(figsize=(14, 7))

        plt.plot(category_data_orders['Order month'].iloc[window:], growth_rate_revenue, label='Revenue', linestyle='-')
        plt.plot(category_data_orders['Order month'].iloc[window:], growth_rate_orders, label='Orders', linestyle='--')
        plt.plot(category_data_acquisitions['Acquisition month'].iloc[window:], growth_rate_acquisitions, label='Acquisitions', linestyle='-.')

        plt.legend()
        plt.title(f'Growth Rates Over Time for {category} in {dimension} (Moving Average)')
        plt.xlabel('Year - Month')
        plt.ylabel('Growth Rate')
        plt.show()

for dimension in dimensions:
    plot_growth_rates_by_dimension(orders_data, acquisition_data, dimension, window=3)

import pandas as pd
import matplotlib.pyplot as plt

# Load the orders and acquisitions data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')

# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)

# Remove the last month's data
max_date_orders = orders_data['Order month'].max()
orders_data = orders_data[orders_data['Order month'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()

# Define dimensions to analyze
dimensions = ['Region', 'Acquisition Channel', 'Segment']

# Function to calculate moving average
def calculate_moving_average(data, value_column, window=3):
    moving_average = data[value_column].rolling(window=window).mean()
    return moving_average

# Function to calculate growth rates based on moving average
def calculate_growth_rates(data, value_column, window=3):
    moving_average = calculate_moving_average(data, value_column, window)
    growth_rate = moving_average.pct_change().dropna() * 100
    return growth_rate

# Plot overall growth rates
def plot_overall_growth_rates(orders_data, acquisition_data, window=3):
    monthly_revenue = orders_data.groupby('Order month')['Revenue'].sum().reset_index()
    monthly_orders = orders_data.groupby('Order month')['Orders'].sum().reset_index()
    monthly_acquisitions = acquisition_data.groupby('Acquisition month')['New Companies'].sum().reset_index()

    growth_rate_revenue = calculate_growth_rates(monthly_revenue, 'Revenue', window)
    growth_rate_orders = calculate_growth_rates(monthly_orders, 'Orders', window)
    growth_rate_acquisitions = calculate_growth_rates(monthly_acquisitions, 'New Companies', window)

    plt.figure(figsize=(14, 7))
    plt.plot(monthly_revenue['Order month'].iloc[window:], growth_rate_revenue, label='Revenue', linestyle='-')
    plt.plot(monthly_orders['Order month'].iloc[window:], growth_rate_orders, label='Orders', linestyle='--')
    plt.plot(monthly_acquisitions['Acquisition month'].iloc[window:], growth_rate_acquisitions, label='Acquisitions', linestyle='-.')

    plt.legend()
    plt.title('Overall Growth Rates (Moving Average)')
    plt.xlabel('Date')
    plt.ylabel('Growth Rate')
    plt.show()

plot_overall_growth_rates(orders_data, acquisition_data, window=3)

# Plot growth rates by dimension
def plot_growth_rates_by_dimension(orders_data, acquisition_data, dimension, window=3):
    plt.figure(figsize=(14, 7))

    for category in orders_data[dimension].unique():
        category_data_orders = orders_data[orders_data[dimension] == category].groupby('Order month').sum().reset_index()
        category_data_acquisitions = acquisition_data[acquisition_data[dimension] == category].groupby('Acquisition month').sum().reset_index()

        growth_rate_revenue = calculate_growth_rates(category_data_orders, 'Revenue', window)
        growth_rate_orders = calculate_growth_rates(category_data_orders, 'Orders', window)
        growth_rate_acquisitions = calculate_growth_rates(category_data_acquisitions, 'New Companies', window)

        plt.plot(category_data_orders['Order month'].iloc[window:], growth_rate_revenue, label=f'{category} - Revenue', linestyle='-')
        plt.plot(category_data_orders['Order month'].iloc[window:], growth_rate_orders, label=f'{category} - Orders', linestyle='--')
        plt.plot(category_data_acquisitions['Acquisition month'].iloc[window:], growth_rate_acquisitions, label=f'{category} - Acquisitions', linestyle='-.')

        plt.legend()
        plt.title(f'Growth Rates Over Time for {category} in {dimension} (Moving Average)')
        plt.xlabel('Year - Month')
        plt.ylabel('Growth Rate')
        plt.show()



for dimension in dimensions:
    plot_growth_rates_by_dimension(orders_data, acquisition_data, dimension, window=3)

orders_data

import pandas as pd


# Load the orders and acquisitions data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')


# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')


# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)


# Remove the last month's data
max_date_orders = orders_data['Order month'].max()
orders_data = orders_data[orders_data['Order month'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()
acquisition_data = acquisition_data[acquisition_data['Acquisition month'] < max_date_acquisition]


# Define dimensions to analyze
dimensions = ['Region', 'Acquisition Channel', 'Segment']


# Function to calculate moving average
def calculate_moving_average(data, value_column, window=3):
   moving_average = data[value_column].rolling(window=window).mean()
   return moving_average


# Function to calculate growth rates based on moving average
def calculate_growth_rates(data, value_column, window=3):
   if len(data) < window:
       return pd.Series([])  # Return empty Series if data length is less than window size

   moving_average = calculate_moving_average(data, value_column, window)
   growth_rate = moving_average.pct_change().dropna() * 100
   return growth_rate


# Function to calculate growth rates and return as DataFrame
def calculate_growth_rates_dataframe(orders_data, acquisition_data, dimension, window=3):
   results = []
   for category in orders_data[dimension].unique():
       category_data_orders = orders_data[orders_data[dimension] == category].groupby('Order month').sum().reset_index()
       category_data_acquisitions = acquisition_data[acquisition_data[dimension] == category].groupby('Acquisition month').sum().reset_index()

       growth_rate_revenue = calculate_growth_rates(category_data_orders, 'Revenue', window)
       growth_rate_orders = calculate_growth_rates(category_data_orders, 'Orders', window)
       growth_rate_acquisitions = calculate_growth_rates(category_data_acquisitions, 'New Companies', window)

       for i in range(len(growth_rate_revenue)):
           if i >= len(growth_rate_revenue):
               break  # Break loop if index exceeds available data

           result = {
               'Dimension': dimension,
               'Category': category,
               'Order month': category_data_orders['Order month'].iloc[window + i],
               'Growth Rate Revenue': growth_rate_revenue.iloc[i] if i < len(growth_rate_revenue) else None,
               'Growth Rate Orders': growth_rate_orders.iloc[i] if i < len(growth_rate_orders) else None,
               'Growth Rate Acquisitions': growth_rate_acquisitions.iloc[i] if i < len(growth_rate_acquisitions) else None
           }
           results.append(result)

   return pd.DataFrame(results)


# Consolidated DataFrame to store results
consolidated_results = pd.DataFrame()

# Calculate and store growth rates for each dimension
for dimension in dimensions:
   dimension_results = calculate_growth_rates_dataframe(orders_data, acquisition_data, dimension, window=3)
   consolidated_results = pd.concat([consolidated_results, dimension_results], ignore_index=True)

# Display or further process consolidated_results DataFrame
consolidated_results.head()

import pandas as pd

# Assuming consolidated_results DataFrame is already populated from previous calculations

# Pivot the 'Order month' column
pivoted_results = pd.pivot_table(consolidated_results,
                                 index=['Dimension', 'Category'],
                                 columns='Order month',
                                 values=['Growth Rate Revenue', 'Growth Rate Orders', 'Growth Rate Acquisitions'])

# Reset index to make Dimension and Category as columns
pivoted_results.reset_index(inplace=True)

# Display the pivoted results
pivoted_results.head()

pivoted_results.to_csv('Growth Rate Results.csv', index=False)

import pandas as pd

# Load the orders and acquisitions data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')


# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')


# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)

# Remove the last month's data
max_date_orders = orders_data['Order month'].max()
orders_data = orders_data[orders_data['Order month'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()
acquisition_data = acquisition_data[acquisition_data['Acquisition month'] < max_date_acquisition]

# Define dimensions to analyze
dimensions = ['Region', 'Acquisition Channel', 'Segment']

# Function to calculate percentage change with the previous month
def calculate_percentage_change(data, value_column):
    pct_change = data[value_column].pct_change().dropna() * 100
    return pct_change

# Function to calculate growth rates and return as DataFrame
def calculate_growth_rates_dataframe(orders_data, acquisition_data, dimension):
    results = []
    for category in orders_data[dimension].unique():
        category_data_orders = orders_data[orders_data[dimension] == category].groupby('Order month').sum().reset_index()
        category_data_acquisitions = acquisition_data[acquisition_data[dimension] == category].groupby('Acquisition month').sum().reset_index()

        growth_rate_revenue = calculate_percentage_change(category_data_orders, 'Revenue')
        growth_rate_orders = calculate_percentage_change(category_data_orders, 'Orders')
        growth_rate_acquisitions = calculate_percentage_change(category_data_acquisitions, 'New Companies')

        for i in range(len(growth_rate_revenue)):
            if i >= len(growth_rate_revenue):
                break  # Break loop if index exceeds available data

            result = {
                'Dimension': dimension,
                'Category': category,
                'Month': category_data_orders['Order month'].iloc[i + 1],  # Adjust index to match pct_change output
                'Growth Rate Revenue': growth_rate_revenue.iloc[i] if i < len(growth_rate_revenue) else None,
                'Growth Rate Orders': growth_rate_orders.iloc[i] if i < len(growth_rate_orders) else None,
                'Growth Rate Acquisitions': growth_rate_acquisitions.iloc[i] if i < len(growth_rate_acquisitions) else None
            }
            results.append(result)

    return pd.DataFrame(results)

# Consolidated DataFrame to store results
consolidated_results = pd.DataFrame()

# Calculate and store growth rates for each dimension
for dimension in dimensions:
    dimension_results = calculate_growth_rates_dataframe(orders_data, acquisition_data, dimension)
    consolidated_results = pd.concat([consolidated_results, dimension_results], ignore_index=True)

# Display or further process consolidated_results DataFrame
print(consolidated_results.head())

import pandas as pd

# Assuming consolidated_results DataFrame is already populated from previous calculations

# Pivot the 'Order month' column
pivoted_results = pd.pivot_table(consolidated_results,
                                 index=['Dimension', 'Category'],
                                 columns='Month',
                                 values=['Growth Rate Revenue', 'Growth Rate Orders', 'Growth Rate Acquisitions'])

# Reset index to make Dimension and Category as columns
pivoted_results.reset_index(inplace=True)

# Display the pivoted results
pivoted_results.head()

pivoted_results.to_csv('Growth Rate Results - Percentage Change.csv', index=False)

import pandas as pd
import matplotlib.pyplot as plt

# Load the orders and acquisitions data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')

# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)

# Remove the last month's data
max_date_orders = orders_data['Order month'].max()
orders_data = orders_data[orders_data['Order month'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()
#acquisition_data = acquisition_data[acquisition_data['Acquisition month'] < max_date_acquisition]

# Function to calculate moving average
def calculate_moving_average(data, value_column, window=3):
    moving_average = data[value_column].rolling(window=window).mean()
    return moving_average

# Function to calculate growth rates based on moving average
def calculate_growth_rates(data, value_column, window=3):
    moving_average = calculate_moving_average(data, value_column, window)
    growth_rate = moving_average.pct_change().dropna() * 100
    return growth_rate

# Plot overall growth rates
def plot_overall_growth_rates(orders_data, acquisition_data, window=3):
    monthly_revenue = orders_data.groupby('Order month')['Revenue'].sum().reset_index()
    monthly_orders = orders_data.groupby('Order month')['Orders'].sum().reset_index()
    monthly_acquisitions = acquisition_data.groupby('Acquisition month')['New Companies'].sum().reset_index()

    growth_rate_revenue = calculate_growth_rates(monthly_revenue, 'Revenue', window)
    growth_rate_orders = calculate_growth_rates(monthly_orders, 'Orders', window)
    growth_rate_acquisitions = calculate_growth_rates(monthly_acquisitions, 'New Companies', window)

    plt.figure(figsize=(14, 7))
    plt.plot(monthly_revenue['Order month'].iloc[window:], growth_rate_revenue, label='Revenue', linestyle='-')
    plt.plot(monthly_orders['Order month'].iloc[window:], growth_rate_orders, label='Orders', linestyle='--')
    plt.plot(monthly_acquisitions['Acquisition month'].iloc[window:], growth_rate_acquisitions, label='Acquisitions', linestyle='-.')

    plt.legend()
    plt.title('Overall Growth Rates (Moving Average)')
    plt.xlabel('Year - Month')
    plt.ylabel('Growth Rate')
    plt.show()

plot_overall_growth_rates(orders_data, acquisition_data, window=3)

import pandas as pd
import matplotlib.pyplot as plt

# Load the orders and acquisitions data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')

# Exclude the last month's data
max_order_date = orders_data['Order month_dt'].max()
max_acquisition_date = acquisition_data['Acquisition month_dt'].max()

orders_data = orders_data[orders_data['Order month_dt'] < max_order_date]

# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)

# Remove the last month's data
max_date_orders = orders_data['Order month'].max()
orders_data = orders_data[orders_data['Order month'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()
acquisition_data = acquisition_data[acquisition_data['Acquisition month'] < max_date_acquisition]

# Function to calculate percentage change growth rates
def calculate_growth_rates(data, value_column):
    growth_rate = data[value_column].pct_change().dropna() * 100
    return growth_rate

# Plot overall growth rates
def plot_overall_growth_rates(orders_data, acquisition_data):
    monthly_revenue = orders_data.groupby('Order month')['Revenue'].sum().reset_index()
    monthly_orders = orders_data.groupby('Order month')['Orders'].sum().reset_index()
    monthly_acquisitions = acquisition_data.groupby('Acquisition month')['New Companies'].sum().reset_index()

    growth_rate_revenue = calculate_growth_rates(monthly_revenue, 'Revenue')
    growth_rate_orders = calculate_growth_rates(monthly_orders, 'Orders')
    growth_rate_acquisitions = calculate_growth_rates(monthly_acquisitions, 'New Companies')

    plt.figure(figsize=(14, 7))
    plt.plot(monthly_revenue['Order month'].iloc[1:], growth_rate_revenue, label='Revenue', linestyle='-')
    plt.plot(monthly_orders['Order month'].iloc[1:], growth_rate_orders, label='Orders', linestyle='--')
    plt.plot(monthly_acquisitions['Acquisition month'].iloc[1:], growth_rate_acquisitions, label='Acquisitions', linestyle='-.')

    plt.legend()
    plt.title('Overall Growth Rates (Percentage Change)')
    plt.xlabel('Year - Month')
    plt.ylabel('Growth Rate (%)')
    plt.show()

plot_overall_growth_rates(orders_data, acquisition_data)

# Combine forecasted data with actual data
def combine_actual_and_forecasted(actual_data, forecasted_data, date_column):
    combined_data = pd.concat([actual_data, forecasted_data], ignore_index=True)
    return combined_data

# Prepare historical data
monthly_revenue = orders_data.groupby('Order month')['Revenue'].sum().reset_index()
monthly_orders = orders_data.groupby('Order month')['Orders'].sum().reset_index()

# Combine historical and forecasted data
combined_revenue = combine_actual_and_forecasted(monthly_revenue, forecasted_revenue_df, 'Order month')
combined_orders = combine_actual_and_forecasted(monthly_orders, forecasted_orders_df, 'Order month')

# Plot combined data
plt.figure(figsize=(14, 7))

plt.subplot(2, 1, 1)
plt.plot(combined_revenue['Order month'], combined_revenue['Revenue'], label='Actual Revenue', linestyle='-')
plt.plot(forecasted_revenue_df['Order month'], forecasted_revenue_df['Forecasted Revenue'], label='Forecasted Revenue', linestyle='--')
plt.title('Actual and Forecasted Revenue')
plt.xlabel('Date')
plt.ylabel('Revenue')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(combined_orders['Order month'], combined_orders['Orders'], label='Actual Orders', linestyle='-')
plt.plot(forecasted_orders_df['Order month'], forecasted_orders_df['Forecasted Orders'], label='Forecasted Orders', linestyle='--')
plt.title('Actual and Forecasted Orders')
plt.xlabel('Date')
plt.ylabel('Orders')
plt.legend()

plt.tight_layout()
plt.show()

import pandas as pd
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Load the datasets
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month_dt'] = pd.to_datetime(orders_data['Order month_dt'])
acquisition_data['Acquisition month_dt'] = pd.to_datetime(acquisition_data['Acquisition month_dt'])

# Convert the Revenue column to numeric, coercing any non-numeric values to NaN
orders_data['Revenue'] = pd.to_numeric(orders_data['Revenue'].str.replace(',', ''))

# Exclude the last month's data
max_order_date = orders_data['Order month_dt'].max()
max_acquisition_date = acquisition_data['Acquisition month_dt'].max()

orders_data = orders_data[orders_data['Order month_dt'] < max_order_date]

# Group by month and sum the relevant columns for orders and revenue data
monthly_orders = orders_data.groupby('Order month_dt').agg({
    'Active Companies': 'sum',
    'Revenue': 'sum',
    'Orders': 'sum'
}).reset_index()

# Group by month and sum the relevant columns for acquisition data
monthly_acquisitions = acquisition_data.groupby('Acquisition month_dt').agg({
    'New Companies': 'sum'
}).reset_index()

# Set the index to the date columns for time series forecasting
monthly_orders.set_index('Order month_dt', inplace=True)
monthly_acquisitions.set_index('Acquisition month_dt', inplace=True)

# Apply exponential smoothing for orders
orders_model = ExponentialSmoothing(monthly_orders['Orders'], trend='add', seasonal='add', seasonal_periods=12).fit()
orders_forecast = orders_model.forecast(6)

# Apply exponential smoothing for revenue
revenue_model = ExponentialSmoothing(monthly_orders['Revenue'], trend='add', seasonal='add', seasonal_periods=12).fit()
revenue_forecast = revenue_model.forecast(6)

# Apply exponential smoothing for new companies
new_companies_model = ExponentialSmoothing(monthly_acquisitions['New Companies'], trend='add', seasonal='add', seasonal_periods=12).fit()
new_companies_forecast = new_companies_model.forecast(6)

# Create a DataFrame for the forecasted values
forecast_dates = pd.date_range(start=max_order_date + pd.offsets.MonthBegin(0), periods=6, freq='MS')
forecast_data = pd.DataFrame({
    'Order month_dt': forecast_dates,
    'Orders Forecast': orders_forecast,
    'Revenue Forecast': revenue_forecast,
    'New Companies Forecast': new_companies_forecast
})

# Combine actual data with forecasted data
actual_orders = monthly_orders.reset_index()
actual_acquisitions = monthly_acquisitions.reset_index()

# Combine orders and revenue with forecasts
combined_orders = pd.concat([actual_orders[['Order month_dt', 'Orders', 'Revenue']],
                             forecast_data[['Order month_dt', 'Orders Forecast', 'Revenue Forecast']]], axis=0)

# Combine new companies with forecasts
combined_acquisitions = pd.concat([actual_acquisitions[['Acquisition month_dt', 'New Companies']],
                                   forecast_data[['Order month_dt', 'New Companies Forecast']].rename(columns={'Order month_dt': 'Acquisition month_dt'})], axis=0)

# Calculate the 3-month simple moving average (SMA) for combined data
combined_orders['Orders SMA'] = combined_orders['Orders'].combine_first(combined_orders['Orders Forecast']).rolling(window=3).mean()
combined_orders['Revenue SMA'] = combined_orders['Revenue'].combine_first(combined_orders['Revenue Forecast']).rolling(window=3).mean()
combined_acquisitions['New Companies SMA'] = combined_acquisitions['New Companies'].combine_first(combined_acquisitions['New Companies Forecast']).rolling(window=3).mean()

# Calculate the growth rates based on the 3-month SMA for combined data
combined_orders['Orders SMA Growth Rate'] = combined_orders['Orders SMA'].pct_change() * 100
combined_orders['Revenue SMA Growth Rate'] = combined_orders['Revenue SMA'].pct_change() * 100
combined_acquisitions['New Companies SMA Growth Rate'] = combined_acquisitions['New Companies SMA'].pct_change() * 100

# Plot the growth rates
plt.figure(figsize=(14, 8))

plt.subplot(3, 1, 1)
plt.plot(combined_orders['Order month_dt'], combined_orders['Orders SMA Growth Rate'], label='Orders SMA Growth Rate', color='blue')
plt.title('Orders SMA Growth Rate')
plt.xlabel('Date')
plt.ylabel('Growth Rate (%)')
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(combined_orders['Order month_dt'], combined_orders['Revenue SMA Growth Rate'], label='Revenue SMA Growth Rate', color='green')
plt.title('Revenue SMA Growth Rate')
plt.xlabel('Date')
plt.ylabel('Growth Rate (%)')
plt.legend()

plt.subplot(3, 1, 3)
plt.plot(combined_acquisitions['Acquisition month_dt'], combined_acquisitions['New Companies SMA Growth Rate'], label='New Companies SMA Growth Rate', color='red')
plt.title('New Companies SMA Growth Rate')
plt.xlabel('Date')
plt.ylabel('Growth Rate (%)')
plt.legend()

plt.tight_layout()
plt.show()

# Display the combined data with growth rates
combined_data = pd.merge(combined_orders[['Order month_dt', 'Orders SMA Growth Rate', 'Revenue SMA Growth Rate']],
                         combined_acquisitions[['Acquisition month_dt', 'New Companies SMA Growth Rate']],
                         left_on='Order month_dt', right_on='Acquisition month_dt', how='outer')

combined_data[['Order month_dt', 'Orders SMA Growth Rate', 'Revenue SMA Growth Rate', 'New Companies SMA Growth Rate']]

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Load the datasets
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'])
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'])

# Convert the Revenue column to numeric, coercing any non-numeric values to NaN
orders_data['Revenue'] = pd.to_numeric(orders_data['Revenue'].str.replace(',', ''))

# Exclude the last month's data
max_order_date = orders_data['Order month'].max()
max_acquisition_date = acquisition_data['Acquisition month'].max()

orders_data = orders_data[orders_data['Order month'] < max_order_date]

# Group by month and sum the relevant columns for orders and revenue data
monthly_orders = orders_data.groupby('Order month').agg({
    'Active Companies': 'sum',
    'Revenue': 'sum',
    'Orders': 'sum'
}).reset_index()

# Group by month and sum the relevant columns for acquisition data
monthly_acquisitions = acquisition_data.groupby('Acquisition month').agg({
    'New Companies': 'sum'
}).reset_index()

# Set the index to the date columns for time series forecasting
monthly_orders.set_index('Order month', inplace=True)
monthly_acquisitions.set_index('Acquisition month', inplace=True)

# Apply exponential smoothing for orders
orders_model = ExponentialSmoothing(monthly_orders['Orders'], trend='add', seasonal='add', seasonal_periods=12).fit()
orders_forecast = orders_model.forecast(6)

# Apply exponential smoothing for revenue
revenue_model = ExponentialSmoothing(monthly_orders['Revenue'], trend='add', seasonal='add', seasonal_periods=12).fit()
revenue_forecast = revenue_model.forecast(6)

# Apply exponential smoothing for new companies
new_companies_model = ExponentialSmoothing(monthly_acquisitions['New Companies'], trend='add', seasonal='add', seasonal_periods=12).fit()
new_companies_forecast = new_companies_model.forecast(6)

# Create a DataFrame for the forecasted values
forecast_dates = pd.date_range(start=max_order_date + pd.offsets.MonthBegin(0), periods=6, freq='MS')
forecast_data = pd.DataFrame({
    'Order month': forecast_dates,
    'Orders Forecast': orders_forecast,
    'Revenue Forecast': revenue_forecast,
    'New Companies Forecast': new_companies_forecast
})

# Combine actual data with forecasted data
actual_orders = monthly_orders.reset_index()
actual_acquisitions = monthly_acquisitions.reset_index()

forecast_data['Orders'] = forecast_data['Orders Forecast']
forecast_data['Revenue'] = forecast_data['Revenue Forecast']

# Combine orders and revenue with forecasts
combined_orders = pd.concat([actual_orders[['Order month', 'Orders', 'Revenue']],
                             forecast_data[['Order month', 'Orders', 'Revenue']]], axis=0)


# Combine new companies with forecasts
combined_acquisitions = pd.concat([actual_acquisitions[['Acquisition month', 'New Companies']],
                                   forecast_data[['Order month', 'New Companies Forecast']].rename(columns={'Order month': 'Acquisition month', 'New Companies Forecast': 'New Companies'})], axis=0)

# Calculate the growth rates as simple percentages with the previous month
combined_orders['Orders Growth Rate'] = combined_orders['Orders'].pct_change() * 100
combined_orders['Revenue Growth Rate'] = combined_orders['Revenue'].pct_change() * 100
combined_acquisitions['New Companies Growth Rate'] = combined_acquisitions['New Companies'].pct_change() * 100

# Plot the growth rates
plt.figure(figsize=(14, 8))

plt.subplot(3, 1, 1)
plt.plot(combined_orders['Order month'], combined_orders['Orders Growth Rate'], label='Orders Growth Rate', color='blue')
plt.title('Orders Growth Rate')
plt.xlabel('Date')
plt.ylabel('Growth Rate (%)')
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(combined_orders['Order month'], combined_orders['Revenue Growth Rate'], label='Revenue Growth Rate', color='green')
plt.title('Revenue Growth Rate')
plt.xlabel('Date')
plt.ylabel('Growth Rate (%)')
plt.legend()

plt.subplot(3, 1, 3)
plt.plot(combined_acquisitions['Acquisition month'], combined_acquisitions['New Companies Growth Rate'], label='New Companies Growth Rate', color='red')
plt.title('New Companies Growth Rate')
plt.xlabel('Date')
plt.ylabel('Growth Rate (%)')
plt.legend()

plt.tight_layout()
plt.show()

# Display the combined data with growth rates
combined_data = pd.merge(combined_orders[['Order month', 'Orders Growth Rate', 'Revenue Growth Rate']],
                         combined_acquisitions[['Acquisition month', 'New Companies Growth Rate']],
                         left_on='Order month', right_on='Acquisition month', how='outer')

combined_data[['Order month', 'Orders Growth Rate', 'Revenue Growth Rate', 'New Companies Growth Rate']]

combined_orders

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import STL

# Load the datasets
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'])
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'])

# Convert the Revenue column to numeric, coercing any non-numeric values to NaN
orders_data['Revenue'] = pd.to_numeric(orders_data['Revenue'].str.replace(',', ''))

max_order_date = orders_data['Order month_dt'].max()
orders_data = orders_data[orders_data['Order month'] < max_order_date]

# Prepare monthly aggregated data
monthly_revenue = orders_data.groupby('Order month')['Revenue'].sum().reset_index()
monthly_orders = orders_data.groupby('Order month')['Orders'].sum().reset_index()
monthly_acquisitions = acquisition_data.groupby('Acquisition month')['New Companies'].sum().reset_index()

# Ensure data is sorted by date
monthly_revenue.sort_values('Order month', inplace=True)
monthly_orders.sort_values('Order month', inplace=True)
monthly_acquisitions.sort_values('Acquisition month', inplace=True)

# Function to perform seasonal decomposition and plot
def seasonal_decomposition_plot(data, date_column, value_column, seasonal_period, title):
    data.set_index(date_column, inplace=True)
    decomposition = STL(data[value_column], seasonal=seasonal_period).fit()

    plt.figure(figsize=(12, 8))
    decomposition.plot()
    plt.suptitle(title, fontsize=16)
    plt.show()

# Perform seasonal decomposition for revenue, orders, and acquisitions
seasonal_decomposition_plot(monthly_revenue, 'Order month', 'Revenue', seasonal_period=13, title='Seasonal Decomposition of Revenue')
seasonal_decomposition_plot(monthly_orders, 'Order month', 'Orders', seasonal_period=13, title='Seasonal Decomposition of Orders')
seasonal_decomposition_plot(monthly_acquisitions, 'Acquisition month', 'New Companies', seasonal_period=13, title='Seasonal Decomposition of New Companies')

import pandas as pd
import matplotlib.pyplot as plt

# Load the orders and acquisitions data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')

# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)

# Remove the last month's data
max_date_orders = orders_data['Order month'].max()
orders_data = orders_data[orders_data['Order month'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()

# Define dimensions to analyze
dimensions = ['Region', 'Acquisition Channel', 'Segment']

# Function to calculate moving average
def calculate_moving_average(data, value_column, window=3):
    moving_average = data[value_column].rolling(window=window).mean()
    return moving_average

# Function to calculate growth rates based on moving average
def calculate_growth_rates(data, value_column, window=3):
    moving_average = calculate_moving_average(data, value_column, window)
    growth_rate = moving_average.pct_change().dropna() * 100
    return growth_rate

# Plot overall growth rates
def plot_overall_growth_rates(orders_data, acquisition_data, window=3):
    monthly_revenue = orders_data.groupby('Order month')['Revenue'].sum().reset_index()
    monthly_orders = orders_data.groupby('Order month')['Orders'].sum().reset_index()
    monthly_acquisitions = acquisition_data.groupby('Acquisition month')['New Companies'].sum().reset_index()

    growth_rate_revenue = calculate_growth_rates(monthly_revenue, 'Revenue', window)
    growth_rate_orders = calculate_growth_rates(monthly_orders, 'Orders', window)
    growth_rate_acquisitions = calculate_growth_rates(monthly_acquisitions, 'New Companies', window)

    plt.figure(figsize=(14, 7))
    plt.plot(monthly_revenue['Order month'].iloc[window:], growth_rate_revenue, label='Revenue', linestyle='-')
    plt.plot(monthly_orders['Order month'].iloc[window:], growth_rate_orders, label='Orders', linestyle='--')
    plt.plot(monthly_acquisitions['Acquisition month'].iloc[window:], growth_rate_acquisitions, label='Acquisitions', linestyle='-.')

    plt.legend()
    plt.title('Overall Growth Rates (Moving Average)')
    plt.xlabel('Date')
    plt.ylabel('Growth Rate')
    plt.show()

plot_overall_growth_rates(orders_data, acquisition_data, window=3)

# Plot growth rates by dimension and metric
def plot_growth_rates_by_dimension_and_metric(orders_data, acquisition_data, dimension, metric, window=3):
    plt.figure(figsize=(14, 7))

    for category in orders_data[dimension].unique():
        category_data_orders = orders_data[orders_data[dimension] == category].groupby('Order month').sum().reset_index()
        category_data_acquisitions = acquisition_data[acquisition_data[dimension] == category].groupby('Acquisition month').sum().reset_index()

        if metric == 'Revenue':
            growth_rate = calculate_growth_rates(category_data_orders, 'Revenue', window)
            plt.plot(category_data_orders['Order month'].iloc[window:], growth_rate, label=f'{category} - {metric}', linestyle='-')
        elif metric == 'Orders':
            growth_rate = calculate_growth_rates(category_data_orders, 'Orders', window)
            plt.plot(category_data_orders['Order month'].iloc[window:], growth_rate, label=f'{category} - {metric}', linestyle='-')
        elif metric == 'Acquisitions':
            growth_rate = calculate_growth_rates(category_data_acquisitions, 'New Companies', window)
            plt.plot(category_data_acquisitions['Acquisition month'].iloc[window:], growth_rate, label=f'{category} - {metric}', linestyle='-')

    plt.legend()
    plt.title(f'Growth Rates Over Time for {metric} by {dimension} (Moving Average)')
    plt.xlabel('Year - Month')
    plt.ylabel('Growth Rate')
    plt.show()

# Plot growth rates for each dimension and metric
for dimension in dimensions:
    for metric in ['Revenue', 'Orders', 'Acquisitions']:
        plot_growth_rates_by_dimension_and_metric(orders_data, acquisition_data, dimension, metric, window=3)

category_data_orders[category_data_orders['Region']=='Aquilonia']

import pandas as pd
import plotly.graph_objects as go

# Load the orders and acquisitions data
orders_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Orders data.csv')
acquisition_data = pd.read_csv('BB Analyst_ Dataset.xlsx - Acquisition data Updated.csv')

# Convert date columns to datetime
orders_data['Order month'] = pd.to_datetime(orders_data['Order month_dt'], format='%Y-%m')
acquisition_data['Acquisition month'] = pd.to_datetime(acquisition_data['Acquisition month_dt'], format='%Y-%m')

# Clean the Revenue column by removing commas and converting to numeric
orders_data['Revenue'] = orders_data['Revenue'].str.replace(',', '').astype(float)

# Remove the last month's data
max_date_orders = orders_data['Order month'].max()
orders_data = orders_data[orders_data['Order month'] < max_date_orders]

max_date_acquisition = acquisition_data['Acquisition month'].max()

# Define dimensions to analyze
dimensions = ['Region', 'Acquisition Channel', 'Segment']

# Function to calculate moving average
def calculate_moving_average(data, value_column, window=3):
    moving_average = data[value_column].rolling(window=window).mean()
    return moving_average

# Function to calculate growth rates based on moving average
def calculate_growth_rates(data, value_column, window=3):
    moving_average = calculate_moving_average(data, value_column, window)
    growth_rate = moving_average.pct_change().dropna() * 100
    return growth_rate

# Plot overall growth rates using Plotly
def plot_overall_growth_rates(orders_data, acquisition_data, window=3):
    monthly_revenue = orders_data.groupby('Order month')['Revenue'].sum().reset_index()
    monthly_orders = orders_data.groupby('Order month')['Orders'].sum().reset_index()
    monthly_acquisitions = acquisition_data.groupby('Acquisition month')['New Companies'].sum().reset_index()

    growth_rate_revenue = calculate_growth_rates(monthly_revenue, 'Revenue', window)
    growth_rate_orders = calculate_growth_rates(monthly_orders, 'Orders', window)
    growth_rate_acquisitions = calculate_growth_rates(monthly_acquisitions, 'New Companies', window)

    fig = go.Figure()

    fig.add_trace(go.Scatter(x=monthly_revenue['Order month'].iloc[window:], y=growth_rate_revenue, mode='lines', name='Revenue'))
    fig.add_trace(go.Scatter(x=monthly_orders['Order month'].iloc[window:], y=growth_rate_orders, mode='lines', name='Orders'))
    fig.add_trace(go.Scatter(x=monthly_acquisitions['Acquisition month'].iloc[window:], y=growth_rate_acquisitions, mode='lines', name='Acquisitions'))

    fig.update_layout(title='Overall Growth Rates (Moving Average)', xaxis_title='Date', yaxis_title='Growth Rate')
    fig.show()

plot_overall_growth_rates(orders_data, acquisition_data, window=3)

# Plot growth rates by dimension and metric using Plotly
def plot_growth_rates_by_dimension_and_metric(orders_data, acquisition_data, dimension, metric, window=3):
    fig = go.Figure()

    for category in orders_data[dimension].unique():
        category_data_orders = orders_data[orders_data[dimension] == category].groupby('Order month').sum().reset_index()
        category_data_acquisitions = acquisition_data[acquisition_data[dimension] == category].groupby('Acquisition month').sum().reset_index()

        if metric == 'Revenue':
            growth_rate = calculate_growth_rates(category_data_orders, 'Revenue', window)
            fig.add_trace(go.Scatter(x=category_data_orders['Order month'].iloc[window:], y=growth_rate, mode='lines', name=f'{category} - {metric}'))
        elif metric == 'Orders':
            growth_rate = calculate_growth_rates(category_data_orders, 'Orders', window)
            fig.add_trace(go.Scatter(x=category_data_orders['Order month'].iloc[window:], y=growth_rate, mode='lines', name=f'{category} - {metric}'))
        elif metric == 'Acquisitions':
            growth_rate = calculate_growth_rates(category_data_acquisitions, 'New Companies', window)
            fig.add_trace(go.Scatter(x=category_data_acquisitions['Acquisition month'].iloc[window:], y=growth_rate, mode='lines', name=f'{category} - {metric}'))

    fig.update_layout(title=f'Growth Rates Over Time for {metric} by {dimension} (Moving Average)', xaxis_title='Year - Month', yaxis_title='Growth Rate')
    fig.show()

# Plot growth rates for each dimension and metric
for dimension in dimensions:
    for metric in ['Revenue', 'Orders', 'Acquisitions']:
        plot_growth_rates_by_dimension_and_metric(orders_data, acquisition_data, dimension, metric, window=3)